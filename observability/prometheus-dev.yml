global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"

scrape_configs:
  # Provenance API Server
  - job_name: 'provenance-api'
    static_configs:
      - targets: ['api-dev:9090']
    scrape_interval: 5s
    metrics_path: /metrics
    
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    
  # Neo4j metrics (if available)
  - job_name: 'neo4j'
    static_configs:
      - targets: ['neo4j:2004']
    scrape_interval: 10s
    metrics_path: /metrics
    
  # Redis metrics (using redis_exporter if available)
  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']
    scrape_interval: 10s
    
  # MinIO metrics
  - job_name: 'minio'
    static_configs:
      - targets: ['minio:9000']
    metrics_path: /minio/v2/metrics/cluster
    scrape_interval: 30s
    
  # Jaeger metrics
  - job_name: 'jaeger'
    static_configs:
      - targets: ['jaeger:14269']
    metrics_path: /metrics
    scrape_interval: 15s

# Alerting configuration (for development)
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093

# Development-specific recording rules
recording_rules:
  - name: provenance_dev_rules
    interval: 30s
    rules:
      - record: provenance:request_rate_5m
        expr: rate(http_requests_total[5m])
      - record: provenance:error_rate_5m
        expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m])
      - record: provenance:response_time_p95_5m
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))