# Multi-stage build for production
FROM golang:1.25.0-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o minimal-server ./cmd/minimal-server/

# Production stage
FROM scratch

# Copy CA certificates for HTTPS
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy the binary
COPY --from=builder /app/minimal-server /minimal-server

# Copy configuration files
COPY --from=builder /app/config/ /config/

# Create non-root user (even though scratch doesn't have adduser)
USER 65534:65534

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/minimal-server", "--health-check"]

# Expose port
EXPOSE 8080

# Set environment variables
ENV GIN_MODE=release
ENV PROVENANCE_ENVIRONMENT=production

# Run the application
ENTRYPOINT ["/minimal-server"]