# GolangCI-Lint configuration for Provenance Graph SBOM Linker
# Reference: https://golangci-lint.run/usage/configuration/

run:
  timeout: 5m
  issues-exit-code: 1
  tests: true
  build-tags:
    - integration
    - e2e
  skip-dirs:
    - vendor
    - third_party
    - .git
    - tmp
    - bin
    - dist
    - mocks
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*_mock\\.go$"
    - ".*\\.gen\\.go$"
  modules-download-mode: readonly
  allow-parallel-runners: true

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  uniq-by-line: true
  sort-results: true

linters-settings:
  # Cyclomatic complexity
  cyclop:
    max-complexity: 15
    package-average: 10.0

  # Duplicate code detection
  dupl:
    threshold: 100

  # Error handling
  errcheck:
    check-type-assertions: true
    check-blank: true
    ignore: fmt:.*,io/ioutil:^Read.*

  # Error wrapping
  errorlint:
    errorf: true
    asserts: true
    comparison: true

  # Exhaustive switch statements
  exhaustive:
    check-generated: false
    default-signifies-exhaustive: false

  # Function complexity
  funlen:
    lines: 80
    statements: 40

  # Go constants
  goconst:
    min-len: 3
    min-occurrences: 3
    numbers: true

  # Go critical rules
  gocritic:
    enabled-tags:
      - diagnostic
      - style
      - performance
      - experimental
      - opinionated
    disabled-checks:
      - paramTypeCombine
      - unnamedResult
      - whyNoLint
    settings:
      captLocal:
        paramsOnly: true
      rangeValCopy:
        sizeThreshold: 32

  # Cognitive complexity
  gocognit:
    min-complexity: 20

  # Go formatting
  gofmt:
    simplify: true

  # Go imports
  goimports:
    local-prefixes: github.com/your-org/provenance-graph-sbom-linker

  # JSON tags
  tagliatelle:
    case:
      use-field-name: false
      rules:
        json: snake
        yaml: snake
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab

  # Gosec security analyzer
  gosec:
    severity: medium
    confidence: medium
    excludes:
      - G104 # Audit errors not checked - we handle this explicitly
      - G204 # Subprocess launched with variable - needed for shell commands
    config:
      global:
        nosec: true
        audit: true

  # Line length
  lll:
    line-length: 120
    tab-width: 4

  # Magic numbers
  gomnd:
    checks:
      - argument
      - case
      - condition
      - operation
      - return
      - assign
    ignored-numbers:
      - 0
      - 1
      - 2
      - 3
      - 8
      - 16
      - 32
      - 64
      - 100
      - 200
      - 300
      - 400
      - 401
      - 403
      - 404
      - 500
      - 1000
      - 1024
      - 2048
      - 4096
      - 8080
      - 8443
      - 3000
      - 5432
      - 6379
      - 7474
      - 7687
    ignored-files:
      - "_test.go"

  # Naming conventions
  stylecheck:
    checks: ["all", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]

  # Unused parameters
  unparam:
    check-exported: true

  # Unused variables
  unused:
    check-exported: false

  # Variable naming
  varnamelen:
    min-name-length: 2
    ignore-type-assert-ok: true
    ignore-map-index-ok: true
    ignore-chan-recv-ok: true
    ignore-names:
      - err
      - ok
      - id
      - db
      - tx
      - wg
      - mu
      - fd
      - ch
      - fn
      - rv
      - pc
      - pt
      - ln
      - up
      - ip
      - ui
      - os
      - fs
      - gc

  # Whitespace
  wsl:
    strict-append: true
    allow-assign-and-call: true
    allow-multiline-assign: true
    allow-case-trailing-whitespace: true
    allow-cuddle-declarations: false

linters:
  disable-all: true
  enable:
    # Enabled by default
    - errcheck
    - gosimple
    - govet
    - ineffassign
    - staticcheck
    - typecheck
    - unused

    # Additional security and quality linters
    - gosec           # Security issues
    - gocritic        # Comprehensive Go linter
    - stylecheck      # Style issues
    - unconvert       # Unnecessary type conversions
    - unparam         # Unused function parameters
    - misspell        # Spelling mistakes
    - goimports       # Import formatting
    - gofmt           # Code formatting
    - goconst         # Repeated strings that could be constants
    - dupl            # Code duplication
    - lll             # Line length
    - whitespace      # Whitespace issues
    - wsl             # Whitespace and line breaks
    - errorlint       # Error wrapping
    - exhaustive      # Exhaustive switch statements
    - exportloopref   # Loop variable references in goroutines
    - funlen          # Function length
    - gocognit        # Cognitive complexity
    - cyclop          # Cyclomatic complexity
    - gomnd           # Magic numbers
    - nestif          # Nested if statements
    - prealloc        # Slice preallocation
    - predeclared     # Predeclared identifiers
    - revive          # Golint replacement
    - rowserrcheck    # SQL rows.Err check
    - sqlclosecheck   # SQL Close check
    - tparallel       # Test parallelization
    - unconvert       # Unnecessary conversions
    - varnamelen      # Variable name length
    - wastedassign    # Wasted assignments
    - asciicheck      # Non-ASCII characters
    - bidichk         # Bidirectional Unicode characters
    - bodyclose       # HTTP response body close
    - containedctx    # Context in struct
    - contextcheck    # Context usage
    - decorder        # Declaration order
    - dogsled         # Blank identifiers
    - durationcheck   # Duration checks
    - errname         # Error naming
    - forbidigo       # Forbidden identifiers
    - forcetypeassert # Force type assertions
    - grouper         # Import grouping
    - importas        # Import aliasing
    - makezero        # Make slice with zero length
    - nilnil          # Nil comparisons
    - noctx           # HTTP requests without context
    - nolintlint      # Nolint directives
    - promlinter      # Prometheus metrics
    - tagliatelle     # Struct tag format
    - tenv            # Testing environment

  # Disable specific linters that conflict with our style
  disable:
    - gochecknoinits  # init functions are sometimes necessary
    - gochecknoglobals # globals are sometimes necessary for configuration
    - godot           # comment formatting is too strict
    - godox           # TODO comments are useful during development
    - goerr113        # error definition style conflicts with our approach
    - goheader        # license headers handled by other tools
    - gomoddirectives # module directives are managed carefully
    - gomodguard      # module restrictions too strict for this project
    - nlreturn        # return style too opinionated
    - nosprintfhostport # sprintf host:port usage is sometimes necessary
    - paralleltest    # parallel testing decisions are case-by-case
    - testpackage     # test package style preference
    - wrapcheck       # error wrapping style too strict

issues:
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gomnd
        - funlen
        - dupl
        - lll
        - goconst
        - gocognit
        - cyclop

    # Exclude some linters from running on main.go files
    - path: cmd/.*main\.go
      linters:
        - gocognit
        - funlen

    # Exclude some linters from running on generated files
    - path: \.pb\.go
      linters:
        - lll
        - dupl

    # Exclude some linters from running on mock files
    - path: _mock\.go
      linters:
        - lll
        - dupl
        - gomnd

    # Exclude some specific false positives
    - text: "Use of weak random number generator"
      linters:
        - gosec
      path: _test\.go

    - text: "Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print.*|os\.(Un)?Setenv). is not checked"
      linters:
        - errcheck

    - text: "should not use dot imports"
      linters:
        - stylecheck
      path: _test\.go

    - text: "cyclomatic complexity"
      linters:
        - gocognit
        - cyclop
      path: _test\.go

  # Show only new issues created in the current patch/commit
  new: false

  # Fix found issues (if it's supported by the linter)
  fix: false

  # Maximum issues count per one linter. Set to 0 to disable.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable.
  max-same-issues: 0

  # Show only new issues created after git revision
  # new-from-rev: origin/main

severity:
  default-severity: error
  case-sensitive: false