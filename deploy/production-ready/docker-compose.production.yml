version: '3.8'

services:
  provenance-server:
    build:
      context: ../../
      dockerfile: Dockerfile.prod
      args:
        - VERSION=${VERSION:-latest}
        - BUILD_DATE=${BUILD_DATE:-unknown}
        - COMMIT_SHA=${COMMIT_SHA:-unknown}
    image: provenance-linker:${VERSION:-latest}
    container_name: provenance-server
    restart: unless-stopped
    ports:
      - "${SERVER_PORT:-8080}:8080"
    environment:
      # Server Configuration
      - ENVIRONMENT=production
      - SERVER_PORT=8080
      - SERVER_READ_TIMEOUT=30s
      - SERVER_WRITE_TIMEOUT=30s
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      
      # Database Configuration
      - NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
      - NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD_FILE=/run/secrets/neo4j_password
      - DB_POOL_SIZE=${DB_POOL_SIZE:-10}
      - DB_TIMEOUT=${DB_TIMEOUT:-30s}
      
      # Redis Configuration  
      - REDIS_ADDR=${REDIS_ADDR:-redis:6379}
      - REDIS_PASSWORD_FILE=/run/secrets/redis_password
      - REDIS_DB=${REDIS_DB:-0}
      - CACHE_TTL=${CACHE_TTL:-300s}
      
      # Security Configuration
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - API_RATE_LIMIT=${API_RATE_LIMIT:-100}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - TLS_ENABLED=${TLS_ENABLED:-false}
      
      # Observability Configuration
      - METRICS_ENABLED=true
      - METRICS_PORT=9090
      - TRACING_ENABLED=${TRACING_ENABLED:-true}
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT:-http://jaeger:14268/api/traces}
      
      # Application Configuration
      - MAX_SBOM_SIZE=${MAX_SBOM_SIZE:-50MB}
      - MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE:-10MB}
      - WORKER_POOL_SIZE=${WORKER_POOL_SIZE:-5}
      - COMPLIANCE_CHECK_INTERVAL=${COMPLIANCE_CHECK_INTERVAL:-1h}
      
    volumes:
      - provenance_data:/app/data
      - provenance_logs:/app/logs
      - provenance_cache:/app/cache
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 100M
          
    secrets:
      - neo4j_password
      - redis_password
      - jwt_secret
      - signing_key
      
    networks:
      - provenance-network
      - monitoring-network
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        monitor: 60s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.provenance.rule=Host(\`provenance.${DOMAIN:-localhost}\`)"
      - "traefik.http.routers.provenance.tls=true"
      - "traefik.http.services.provenance.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.provenance-auth.basicauth.usersfile=/etc/traefik/.htpasswd"

  neo4j:
    image: neo4j:5.24-community
    container_name: provenance-neo4j
    restart: unless-stopped
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-changepassword}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_server_memory_heap_initial__size=512m
      - NEO4J_server_memory_heap_max__size=2g
      - NEO4J_server_memory_pagecache_size=512m
      - NEO4J_server_logs_debug_level=${NEO4J_LOG_LEVEL:-INFO}
      
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      
    networks:
      - provenance-network
      
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-changepassword}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
      
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  redis:
    image: redis:7.2-alpine
    container_name: provenance-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-changepassword}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      
    volumes:
      - redis_data:/data
      - redis_config:/usr/local/etc/redis
      
    networks:
      - provenance-network
      
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-changepassword}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 256M

  # Observability Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: provenance-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      
    volumes:
      - ../../observability/prometheus-dev.yml:/etc/prometheus/prometheus.yml:ro
      - ../../observability/prometheus-rules.yaml:/etc/prometheus/rules.yaml:ro
      - prometheus_data:/prometheus
      
    networks:
      - monitoring-network
      
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: provenance-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
      - GF_SERVER_ROOT_URL=https://${GRAFANA_DOMAIN:-localhost}/grafana/
      
    volumes:
      - ../../observability/grafana-dashboard.json:/var/lib/grafana/dashboards/provenance.json:ro
      - grafana_data:/var/lib/grafana
      
    networks:
      - monitoring-network
      
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer / Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: provenance-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.httpchallenge=true
      - --certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.myresolver.acme.email=${ACME_EMAIL:-admin@localhost}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
      
    networks:
      - provenance-network
      - monitoring-network
      
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Log Aggregation (Optional)
  loki:
    image: grafana/loki:latest
    container_name: provenance-loki
    restart: unless-stopped
    ports:
      - "${LOKI_PORT:-3100}:3100"
    command: -config.file=/etc/loki/local-config.yaml
    
    volumes:
      - loki_data:/loki
      
    networks:
      - monitoring-network

volumes:
  # Application volumes
  provenance_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/provenance
  provenance_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/logs
  provenance_cache:
    driver: local
    driver_opts:
      type: none  
      o: bind
      device: ${DATA_PATH:-./data}/cache

  # Database volumes
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  redis_config:
    driver: local

  # Monitoring volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  
  # Infrastructure volumes
  traefik_letsencrypt:
    driver: local

networks:
  provenance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

secrets:
  neo4j_password:
    file: ./secrets/neo4j_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  signing_key:
    file: ./secrets/signing_key.pem