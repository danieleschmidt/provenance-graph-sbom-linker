# Continuous Integration Workflow
# =============================================================================

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: "1.21"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # Code Quality and Security
  # =============================================================================
  
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Verify Go modules
        run: |
          go mod verify
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m --verbose

      - name: Check formatting
        run: |
          gofmt -l .
          if [ $(gofmt -l . | wc -l) -ne 0 ]; then
            echo "Code is not formatted properly"
            exit 1
          fi

      - name: Check imports
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          goimports -l .
          if [ $(goimports -l . | wc -l) -ne 0 ]; then
            echo "Imports are not formatted properly"
            exit 1
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: './...'
          format: sarif
          output: results.sarif

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # Testing
  # =============================================================================
  
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.20", "1.21"]
    
    services:
      neo4j:
        image: neo4j:5.14-community
        env:
          NEO4J_AUTH: neo4j/password
        ports:
          - 7687:7687
          - 7474:7474
        options: >-
          --health-cmd "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 60s

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install dependencies
        run: |
          go mod download
          go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:7474; do sleep 1; done'
          timeout 30 bash -c 'until redis-cli -h localhost ping; do sleep 1; done'

      - name: Run unit tests
        run: |
          go test -v -race -count=1 -coverprofile=coverage.out ./pkg/... ./internal/...

      - name: Run integration tests
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USERNAME: neo4j
          NEO4J_PASSWORD: password
          REDIS_URL: redis://localhost:6379
        run: |
          go test -v -race -count=1 -tags=integration ./test/integration/...

      - name: Generate coverage report
        run: |
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out | tail -1

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Upload coverage reports as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports-${{ matrix.go-version }}
          path: |
            coverage.out
            coverage.html

  # =============================================================================
  # Build and Package
  # =============================================================================
  
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binaries
        run: |
          make build-all

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: dist/

  # =============================================================================
  # Container Build and Scan
  # =============================================================================
  
  container:
    name: Container Build & Scan
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            COMMIT=${{ github.sha }}
            DATE=${{ github.event.head_commit.timestamp }}

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-image-results.sarif'

  # =============================================================================
  # SBOM Generation
  # =============================================================================
  
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Generate SBOM with CycloneDX
        run: |
          go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest
          cyclonedx-gomod mod -output sbom.cyclonedx.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sbom-files
          path: |
            sbom.spdx.json
            sbom.cyclonedx.json

  # =============================================================================
  # Notification
  # =============================================================================
  
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, test, build, container, sbom]
    if: always()
    
    steps:
      - name: Notify on success
        if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "✅ CI pipeline completed successfully!"
          
      - name: Notify on failure
        if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ CI pipeline failed!"
          exit 1