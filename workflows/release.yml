# Release Workflow
# =============================================================================

name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  GO_VERSION: "1.21"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # Pre-release Validation
  # =============================================================================
  
  validate:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Validate version format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: ${{ steps.version.outputs.version }}"
            exit 1
          fi

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run tests
        run: make test

      - name: Run security scan
        run: make security-scan

      - name: Build binaries
        run: make build-all

  # =============================================================================
  # Build Release Artifacts
  # =============================================================================
  
  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
            extension: .exe
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          COMMIT="${{ github.sha }}"
          DATE="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          
          LDFLAGS="-X github.com/your-org/provenance-graph-sbom-linker/internal/version.Version=${VERSION} \
                   -X github.com/your-org/provenance-graph-sbom-linker/internal/version.Commit=${COMMIT} \
                   -X github.com/your-org/provenance-graph-sbom-linker/internal/version.Date=${DATE}"
          
          BINARY_NAME="provenance-linker-${GOOS}-${GOARCH}${{ matrix.extension }}"
          
          go build -ldflags "${LDFLAGS}" -o "${BINARY_NAME}" ./cmd/server
          
          # Create archive
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            zip "${BINARY_NAME%.exe}.zip" "${BINARY_NAME}" README.md LICENSE
          else
            tar -czf "${BINARY_NAME}.tar.gz" "${BINARY_NAME}" README.md LICENSE
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            provenance-linker-*
            *.tar.gz
            *.zip

  # =============================================================================
  # Container Release
  # =============================================================================
  
  container:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: [validate, build]
    permissions:
      contents: read
      packages: write
      id-token: write  # For cosign
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate.outputs.version }}
            COMMIT=${{ github.sha }}
            DATE=${{ github.event.head_commit.timestamp }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign container image
        run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

      - name: Generate SBOM and sign
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Sign SBOM
        run: |
          cosign attest --yes --predicate sbom.spdx.json --type spdxjson ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

  # =============================================================================
  # Generate SBOM
  # =============================================================================
  
  sbom:
    name: Generate Release SBOM
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate SPDX SBOM
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json
          output-file: provenance-linker-${{ needs.validate.outputs.version }}.spdx.json

      - name: Generate CycloneDX SBOM
        run: |
          go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest
          cyclonedx-gomod mod -output provenance-linker-${{ needs.validate.outputs.version }}.cyclonedx.json

      - name: Sign SBOMs
        run: |
          cosign sign-blob --yes provenance-linker-${{ needs.validate.outputs.version }}.spdx.json --output-signature provenance-linker-${{ needs.validate.outputs.version }}.spdx.json.sig
          cosign sign-blob --yes provenance-linker-${{ needs.validate.outputs.version }}.cyclonedx.json --output-signature provenance-linker-${{ needs.validate.outputs.version }}.cyclonedx.json.sig

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sbom-artifacts
          path: |
            *.spdx.json
            *.cyclonedx.json
            *.sig

  # =============================================================================
  # Create GitHub Release
  # =============================================================================
  
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, container, sbom]
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          CURRENT_TAG="${{ needs.validate.outputs.version }}"
          
          echo "## What's Changed" > CHANGELOG.md
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "### Commits since $PREVIOUS_TAG" >> CHANGELOG.md
            git log --pretty=format:"- %s" "${PREVIOUS_TAG}..HEAD" >> CHANGELOG.md
          else
            echo "### Initial Release" >> CHANGELOG.md
            git log --pretty=format:"- %s" >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "### Container Images" >> CHANGELOG.md
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}\`" >> CHANGELOG.md
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> CHANGELOG.md
          
          echo "" >> CHANGELOG.md
          echo "### Verification" >> CHANGELOG.md
          echo "All release artifacts are signed with cosign and can be verified using:" >> CHANGELOG.md
          echo "\`\`\`" >> CHANGELOG.md
          echo "cosign verify ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}" >> CHANGELOG.md
          echo "\`\`\`" >> CHANGELOG.md

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          bodyFile: CHANGELOG.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}
          artifacts: |
            release-artifacts/*
            sbom-artifacts/*
          token: ${{ secrets.GITHUB_TOKEN }}

  # =============================================================================
  # Post-release Actions
  # =============================================================================
  
  post-release:
    name: Post-release Actions
    runs-on: ubuntu-latest
    needs: [validate, release]
    
    steps:
      - name: Update latest release info
        run: |
          echo "## Release ${{ needs.validate.outputs.version }} completed successfully! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts published:" >> $GITHUB_STEP_SUMMARY
          echo "- Binary releases for multiple platforms" >> $GITHUB_STEP_SUMMARY
          echo "- Container images with multi-arch support" >> $GITHUB_STEP_SUMMARY
          echo "- Signed SBOMs (SPDX and CycloneDX)" >> $GITHUB_STEP_SUMMARY
          echo "- Cosign signatures for all artifacts" >> $GITHUB_STEP_SUMMARY

      - name: Notify on release
        run: |
          echo "✅ Release ${{ needs.validate.outputs.version }} published successfully!"
          echo "GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }}"
          echo "Container: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.version }}"