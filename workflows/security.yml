# Copy this file to .github/workflows/security.yml after merging the main PR
# Security Workflow
# =============================================================================

name: Security

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # =============================================================================
  # CodeQL Analysis
  # =============================================================================
  
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go', 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Set up Go
        if: matrix.language == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Build Go application
        if: matrix.language == 'go'
        run: |
          make build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # =============================================================================
  # Dependency Scanning
  # =============================================================================
  
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, GPL-3.0

  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Run Govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

      - name: Run Nancy (Sonatype)
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =============================================================================
  # Secret Scanning
  # =============================================================================
  
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # =============================================================================
  # SAST (Static Application Security Testing)
  # =============================================================================
  
  sast:
    name: SAST Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - name: Run Gosec
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'

      - name: Upload Gosec results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec-results.sarif

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/golang
          generateSarif: "1"

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: semgrep.sarif

  # =============================================================================
  # Container Security
  # =============================================================================
  
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t provenance-linker:test .

      - name: Run Trivy on container image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'provenance-linker:test'
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy container scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-image-results.sarif'

      - name: Run Grype on container image
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          grype provenance-linker:test -o sarif > grype-results.sarif

      - name: Upload Grype results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'grype-results.sarif'

      - name: Run Hadolint on Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: hadolint-results.sarif

  # =============================================================================
  # OpenSSF Scorecard
  # =============================================================================
  
  scorecard:
    name: OpenSSF Scorecard
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run analysis
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif

  # =============================================================================
  # Security Report
  # =============================================================================
  
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [codeql, vulnerability-scan, secret-scan, sast, container-security]
    if: always()
    
    steps:
      - name: Generate security summary
        run: |
          echo "## Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          
          if [ "${{ needs.codeql.result }}" == "success" ]; then
            echo "✅ CodeQL Analysis: Passed" >> security-summary.md
          else
            echo "❌ CodeQL Analysis: Failed" >> security-summary.md
          fi
          
          if [ "${{ needs.vulnerability-scan.result }}" == "success" ]; then
            echo "✅ Vulnerability Scan: Passed" >> security-summary.md
          else
            echo "❌ Vulnerability Scan: Failed" >> security-summary.md
          fi
          
          if [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "✅ Secret Scan: Passed" >> security-summary.md
          else
            echo "❌ Secret Scan: Failed" >> security-summary.md
          fi
          
          if [ "${{ needs.sast.result }}" == "success" ]; then
            echo "✅ SAST Scan: Passed" >> security-summary.md
          else
            echo "❌ SAST Scan: Failed" >> security-summary.md
          fi
          
          if [ "${{ needs.container-security.result }}" == "success" ]; then
            echo "✅ Container Security: Passed" >> security-summary.md
          else
            echo "❌ Container Security: Failed" >> security-summary.md
          fi
          
          cat security-summary.md

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md