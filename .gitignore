# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/

# Go specific
vendor/
*.out
*.prof
coverage.txt
coverage.html
*.test
*.bench
debug
bin/
dist/
tmp/

# Generated files
*.pb.go
*_mock.go
*.gen.go
*_string.go
docs/api/

# Build artifacts
main
provenance-linker
provenance-*
*.exe
*.dll
*.so
*.dylib

# IDEs
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
*.log
logs/

# Database
*.db
*.sqlite
*.sqlite3

# Cache directories
.cache/
.npm/
.yarn/
node_modules/

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Editor directories and files
.vscode/launch.json
.vscode/tasks.json

# Local environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Backup files
*.bak
*.backup
*.tmp

# Security
*.key
*.pem
*.crt
*.p12
*.pfx
private_key*
public_key*
cosign.*
secrets/

# Docker
.dockerignore

# Kubernetes
kubeconfig
*.kubeconfig

# Terraform
*.tfstate
*.tfstate.*
.terraform/
*.tfvars

# Helm
charts/*/charts/
charts/*/requirements.lock

# Monitoring
prometheus_data/
grafana_data/

# Database data
neo4j_data/
redis_data/

# Test artifacts
test-results/
test-reports/
integration-test-data/

# Performance profiling
*.pprof
profile.out
mem.prof
cpu.prof

# Benchmarks
benchmark-results/
*.bench

# Documentation
docs/_build/
docs/site/

# Release artifacts
release/
packages/
archives/

# Local development
local/
scripts/local/
dev-env/

# =============================================================================
# Security and Compliance Specific
# =============================================================================

# SBOM files (unless specifically tracked)
*.sbom.json
*.cyclonedx.json
*.spdx.json
sbom-cache/
vulnerability-reports/

# Provenance and attestation data
*.att
*.attestation
*.provenance
provenance-cache/
attestation-cache/

# Signing keys and certificates (ensure these are never committed)
*.key
*.priv
*.private
*.secret
*.p8
*.p12
*.pfx
*.keystore
*.jks
cosign.key
cosign.pub
signing-keys/
certificates/

# Secrets detection baselines
.secrets.baseline
.gitleaks.toml

# Security scan results
*.sarif
security-reports/
vulnerability-scans/
gosec-results/
trivy-results/
anchore-results/

# Compliance reports
compliance-reports/
audit-logs/
nist-ssdf-reports/
eu-cra-reports/

# Runtime security data
runtime-attestations/
runtime-signatures/
deployment-attestations/

# Container scanning results
container-scan-results/
image-scan-cache/

# Dependency analysis
dependency-reports/
license-reports/
dependency-cache/

# ML/AI model artifacts (if used)
*.model
*.pkl
*.h5
*.onnx
model-artifacts/
training-data/
model-registry/

# Observability and monitoring temp files
metrics-temp/
traces-temp/
logs-temp/
observability-cache/
