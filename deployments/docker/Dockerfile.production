# Multi-stage production Dockerfile for Self-Healing Pipeline Guard System
# TERRAGON SDLC AUTONOMOUS EXECUTION - Production Deployment

# Build stage
FROM golang:1.24-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application with optimizations
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -a -installsuffix cgo \
    -ldflags='-w -s -extldflags "-static"' \
    -o provenance-linker \
    ./cmd/server

# Production stage
FROM alpine:3.19

# Install runtime dependencies
RUN apk --no-cache add \
    ca-certificates \
    tzdata \
    curl \
    jq \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/provenance-linker /app/provenance-linker

# Copy configuration files
COPY --from=builder /app/config/ /app/config/
COPY --from=builder /app/scripts/ /app/scripts/

# Create directories for logs and data
RUN mkdir -p /app/logs /app/data /app/tmp && \
    chown -R appuser:appgroup /app

# Copy health check script
COPY deployments/docker/healthcheck.sh /app/healthcheck.sh
RUN chmod +x /app/healthcheck.sh

# Set proper permissions
RUN chmod +x /app/provenance-linker && \
    chmod +x /app/scripts/*.sh

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /app/healthcheck.sh

# Environment variables
ENV GIN_MODE=release \
    LOG_LEVEL=info \
    LOG_FORMAT=json \
    SERVER_PORT=8080 \
    SERVER_READ_TIMEOUT=30s \
    SERVER_WRITE_TIMEOUT=30s \
    SELF_HEALING_ENABLED=true \
    PERFORMANCE_OPTIMIZATION=true \
    MONITORING_ENABLED=true

# Entry point
ENTRYPOINT ["/app/provenance-linker"]