# Security Workflow
# =============================================================================

name: Security

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  push:
    branches: [ main ]
    paths:
      - 'go.mod'
      - 'go.sum'
      - 'Dockerfile'
      - '.dockerignore'
  pull_request:
    branches: [ main ]
    paths:
      - 'go.mod'
      - 'go.sum'
      - 'Dockerfile'
      - '.dockerignore'
  workflow_dispatch:

env:
  GO_VERSION: "1.21"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # Vulnerability Scanning
  # =============================================================================
  
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Nancy vulnerability scanner
        run: |
          go list -json -deps ./... | docker run --rm -i sonatypecommunity/nancy:latest sleuth

  # =============================================================================
  # Static Security Analysis
  # =============================================================================
  
  static-analysis:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'

      - name: Upload Gosec scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'gosec-results.sarif'

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: 'auto'
          generateSarif: '1'

      - name: Upload Semgrep scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif
        if: always()

  # =============================================================================
  # Container Security
  # =============================================================================
  
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: |
          docker build -t security-scan:latest .

      - name: Run Trivy vulnerability scanner on container
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:latest'
          format: 'sarif'
          output: 'trivy-container-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-container-results.sarif'

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: security-scan:latest
          sarif-file: scout-results.sarif
          summary: true

      - name: Upload Docker Scout scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: scout-results.sarif
        if: always()

  # =============================================================================
  # Secret Detection
  # =============================================================================
  
  secret-detection:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # =============================================================================
  # License Compliance
  # =============================================================================
  
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest

      - name: Check licenses
        run: |
          go-licenses check ./...
          go-licenses report ./... > license-report.txt

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: license-report.txt

  # =============================================================================
  # SBOM Security Analysis
  # =============================================================================
  
  sbom-security:
    name: SBOM Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Scan SBOM for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'sbom'
          scan-ref: 'sbom.spdx.json'
          format: 'sarif'
          output: 'sbom-scan-results.sarif'

      - name: Upload SBOM scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'sbom-scan-results.sarif'

  # =============================================================================
  # Security Notification
  # =============================================================================
  
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [dependency-scan, static-analysis, container-security, secret-detection, license-check, sbom-security]
    if: always()
    
    steps:
      - name: Security scan summary
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Static Analysis | ${{ needs.static-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security | ${{ needs.container-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Detection | ${{ needs.secret-detection.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SBOM Security | ${{ needs.sbom-security.result }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.dependency-scan.result }}" == "failure" || "${{ needs.static-analysis.result }}" == "failure" || "${{ needs.container-security.result }}" == "failure" ]]; then
            echo "⚠️ Security vulnerabilities detected! Please review the Security tab for details."
            exit 1
          else
            echo "✅ All security scans completed successfully!"
          fi